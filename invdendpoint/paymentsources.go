package invdendpoint

import (
	"encoding/json"
	"errors"
)

const (
	SourcesEndPoint      = "/payment_sources"
	CardsEndPoint        = "/cards"
	BankAccountsEndPoint = "/bank_accounts"
)

type PaymentSource struct {
	*Card
	*BankAccount
	Method        string `json:"method,omitempty"`         // Method type, e.g. "card" or "bank_account"
	MakeDefault   bool   `json:"make_default,omitempty"`   // When true, makes payment source the default
	InvoicedToken string `json:"invoiced_token,omitempty"` // Optional, generated by invoiced.js
	GatewayToken  string `json:"gateway_token,omitempty"`  // Optional, generated by payment gateway
	Object        string `json:"object,omitempty"`
}

type PaymentSources []PaymentSource

type Card struct {
	Id       int64  `json:"id,omitempty"`        // The card’s unique ID
	Object   string `json:"object,omitempty"`    // card
	Brand    string `json:"brand,omitempty"`     // Card brand
	Last4    string `json:"last4,omitempty"`     // Last 4 digits of card
	ExpMonth int    `json:"exp_month,omitempty"` // Expiry month
	ExpYear  int    `json:"exp_year,omitempty"`  // Expiry year
	Funding  string `json:"funding,omitempty"`   // Funding instrument, can be credit, debit, prepaid, or unknown
}

type BankAccount struct {
	Id            int64  `json:"id,omitempty"`             // The bank account’s unique ID
	Object        string `json:"object,omitempty"`         // bank_account
	BankName      string `json:"bank_name,omitempty"`      // Bank name
	Last4         string `json:"last4,omitempty"`          // Last 4 digits of bank account
	RoutingNumber string `json:"routing_number,omitempty"` // Bank routing number
	Verified      bool   `json:"verified,omitempty"`       // Whether the bank account has been verified with instant verification or micro-deposits
	Currency      string `json:"currency,omitempty"`       // 3-letter ISO code
}

func (d *PaymentSource) UnmarshalJSON(data []byte) error {
	temp := struct {
		Object string `json:"object"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	if temp.Object == "card" {
		var c Card
		if err := json.Unmarshal(data, &c); err != nil {
			return err
		}
		d.Card = &c
		d.BankAccount = nil
	} else if temp.Object == "bank_account" {
		var ba BankAccount
		if err := json.Unmarshal(data, &ba); err != nil {
			return err
		}
		d.BankAccount = &ba
		d.Card = nil
	} else {
		return errors.New("Invalid object value")
	}
	return nil
}
